#!/usr/bin/env python

# as a bash script 
# or include as env variables.
# 
# find -E "$(base_path)" -regex "(.*)gc(da|no)$" | rsync --file-from=- / "$(build_products)/lcov"
# bin/lcov -z -d "$(build_products)/lcov"
# bin/lcov -c --derive-func-data -d "$(build_products)/lcov" -o coverage.info
# exclude whatever i need to exclude (test files, main, SDKs for instance)
# python bin/lcov_cobertura.py coverage.info -b $(SRCROOT) -o coverage.xml


import json
import argparse
import subprocess
import shutil
import os

def spawn_process_with_params(process, params=[]):
	process_call = [process]
	
	for param in params:
		process_call.append(param)
	# print "Process arguments: ", process_call

	return spawn_process(process_call)


def spawn_process(cmd):
	return subprocess.check_output(cmd)


def main():
	parser = argparse.ArgumentParser(description='Generate the coverage report from the compiled files information')
		
	parser.add_argument('-e','--exclude', help="JSON compilation settings file", action="append")
	parser.add_argument('-o','--output', help="Output path for the report", default="coverage.xml")
	parser.add_argument('-r','--report', help="Type of report to generate (gcov-info or cobertura)", choices=['gcov-info', 'cobertura'], default='cobertura')
	parser.add_argument('settings', help="Settings file generated xas-build")

	args = parser.parse_args()

	settings = json.load(open(args.settings, 'r'))

	target = settings['BUILT_PRODUCTS_DIR']+"/lcov/"
	
	# delete previous report, if exists
	if os.path.exists(target):
		shutil.rmtree(target)

	# create new lcov dir under BUILT_PRODUCTS_DIR
	if not os.path.exists(target):
		os.makedirs(target)

	# get the directory where the coverage info is located and cp to somewhere simpler
	copy_coverage_info(settings['CONFIGURATION_TEMP_DIR'], target)

	# capture the data from the files copied.
	capture_coverage_data(target, settings, args)

	# exclude the expressions if present

	# generate the report in the right format & place.

def capture_coverage_data(target, settings, args):
	# execute the call to the lcov
	output = spawn_process_with_params('bin/lcov', 
				 ['--capture', 
				  '--derive-func-data', 
				  #'-b', '"'+settings['SRCROOT']+'"', 
				  '-d', '"'+target+'"',
				  #'-o', '"'+args.output+'"'
				  ])
	print "------------------------------------------------"
	print output
	print "------------------------------------------------"

def copy_coverage_info(base_path, target):
	files = spawn_process_with_params('find', ['-E',base_path, '-regex', "(.*)gc(da|no)$"])
	for file in files.split('\n'):
		file = file.strip()
		if file != '' and not "_vers." in file:
			shutil.copy(file, target)
	
# ----------------------

if __name__ == "__main__":
	main()